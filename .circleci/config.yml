version: 2

volumes: &volumes
  name: Ensuring application volumes
  command: |
    mkdir -p ./data
    mkdir -p ./lib

jobs:
  test-api-commands:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi runtime
          command: |
            source start standard test api
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Run local command tests
          command: ./zimagi test --types=command_local
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000

  test-api-encrypted-commands:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi runtime
          command: |
            source start standard test api.encrypted
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Run local command tests
          command: ./zimagi test --types=command_local
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000

  test-worker-commands:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi runtime
          command: |
            source start standard test default
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Run local command tests
          command: ./zimagi test --types=command_local
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000
      - run:
          name: Worker log entries
          when: always
          command: |
            for worker in $(docker ps --filter name=zimagi-test.worker- -aq); do
              echo "===================================================="
              echo "Dumping logs for container: ${worker}"
              echo "===================================================="
              docker logs "$worker" --tail=500
              echo "===================================================="
            done

  test-javascript-sdk:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi Docker runtime
          command: |
            source start standard test api
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Install Javascript SDK dependencies
          command: ./js-sdk install
      - run:
          name: Run API Javascript SDK tests
          command: ./js-sdk run test
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Data API log entries
          when: always
          command: docker compose logs data-api --tail=5000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000

  test-javascript-encrypted-sdk:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi Docker runtime
          command: |
            source start standard test api.encrypted
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Install Javascript SDK dependencies
          command: ./js-sdk install
      - run:
          name: Run API Javascript encrypted SDK tests
          command: ./js-sdk run test
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Data API log entries
          when: always
          command: docker compose logs data-api --tail=5000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000

  test-python-sdk:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi Docker runtime
          command: |
            source start standard test api
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Run API Python SDK tests
          command: ./zimagi test --types=python_sdk --exclude-tags=schema,schedule
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Data API log entries
          when: always
          command: docker compose logs data-api --tail=5000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000

  test-python-encrypted-sdk:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi Docker runtime
          command: |
            source start standard test api.encrypted
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Run API Python encrypted SDK tests
          command: ./zimagi test --types=python_sdk --exclude-tags=schema,schedule
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=1000
      - run:
          name: Data API log entries
          when: always
          command: docker compose logs data-api --tail=5000
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=5000

  test-api-schema:
      machine:
          image: ubuntu-2204:current
      steps:
          - checkout
          - run: *volumes
          - run:
              name: Initialize Zimagi Docker runtime
              command: |
                source start standard test api.encrypted
                echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
          - run:
              name: Run API schema tests (standard)
              no_output_timeout: 25m
              command: ./zimagi test --types=python_sdk --tags=schema
          - run:
              name: Scheduler log entries
              when: always
              command: docker compose logs scheduler --tail=500
          - run:
              name: Command API log entries
              when: always
              command: docker compose logs command-api --tail=500
          - run:
              name: Data API log entries
              when: always
              command: docker compose logs data-api --tail=500

  test-schedule:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Initialize Zimagi Docker runtime
          command: |
            source start standard test default
            echo "export COMPOSE_FILE='${COMPOSE_FILE}'" >> $BASH_ENV
      - run:
          name: Run scheduler tests
          command: ./zimagi test --types=python_sdk --tags=schedule
      - run:
          name: Scheduler log entries
          when: always
          command: docker compose logs scheduler --tail=500
      - run:
          name: Command API log entries
          when: always
          command: docker compose logs command-api --tail=500
      - run:
          name: Data API log entries
          when: always
          command: docker compose logs data-api --tail=500
      - run:
          name: Worker log entries
          when: always
          command: |
            for worker in $(docker ps --filter name=zimagi-test.worker- -aq); do
              echo "===================================================="
              echo "Dumping logs for container: ${worker}"
              echo "===================================================="
              docker logs "$worker" --tail=500
              echo "===================================================="
            done

  deploy-cli-docker-amd64-latest:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest AMD CLI Docker image (zimagi/cli:latest)
          command: ./docker/deploy_cli_image.sh latest

  deploy-cli-docker-arm64-latest:
    resource_class: arm.medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest ARM CLI Docker image (zimagi/cli:latest)
          command: ./docker/deploy_cli_image.sh latest

  deploy-cli-docker-latest:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest Docker platform manifest (zimagi/cli:latest)
          command: ./docker/deploy_cli_manifest.sh latest

  deploy-cli-docker-amd64-version:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned AMD Docker image (zimagi/server:x.x.x)
          command: ./docker/deploy_cli_image.sh

  deploy-cli-docker-arm64-version:
    resource_class: arm.medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned ARM Docker image (zimagi/server:x.x.x)
          command: ./docker/deploy_cli_image.sh

  deploy-cli-docker-version:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned Docker platform manifest (zimagi/server:x.x.x)
          command: ./docker/deploy_cli_manifest.sh

  deploy-server-docker-amd64-latest:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest AMD Docker image (zimagi/server:latest)
          command: ./docker/deploy_server_image.sh standard latest

  deploy-server-docker-arm64-latest:
    resource_class: arm.medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest ARM Docker image (zimagi/server:latest)
          command: ./docker/deploy_server_image.sh standard latest

  deploy-server-docker-latest:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest Docker platform manifest (zimagi/server:latest)
          command: ./docker/deploy_server_manifest.sh standard latest

  deploy-server-docker-nvidia-amd64-latest:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest AMD Nvidia Docker image (zimagi/server:nvidia-latest)
          command: ./docker/deploy_server_image.sh nvidia latest

  deploy-server-docker-nvidia-latest:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy latest Nvidia Docker platform manifest (zimagi/server:nvidia-latest)
          command: ./docker/deploy_server_manifest.sh nvidia latest

  deploy-server-docker-amd64-version:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned AMD Docker image (zimagi/server:x.x.x)
          command: ./docker/deploy_server_image.sh

  deploy-server-docker-arm64-version:
    resource_class: arm.medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned ARM Docker image (zimagi/server:x.x.x)
          command: ./docker/deploy_server_image.sh

  deploy-server-docker-version:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned Docker platform manifest (zimagi/server:x.x.x)
          command: ./docker/deploy_server_manifest.sh

  deploy-server-docker-nvidia-amd64-version:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned AMD Nvidia Docker image (zimagi/server:nvidia-x.x.x)
          command: ./docker/deploy_server_image.sh nvidia

  deploy-server-docker-nvidia-version:
    resource_class: medium
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run: *volumes
      - run:
          name: Deploy versioned Nvidia Docker platform manifest (zimagi/server:nvidia-x.x.x)
          command: ./docker/deploy_server_manifest.sh nvidia

  deploy-npm:
    docker:
      - image: cimg/node:20.14
    steps:
      - checkout
      - run:
          name: Deploy NPM release
          command: ./sdk/javascript/deploy.sh

  deploy-pip:
    docker:
      - image: python:3.12
    steps:
      - checkout
      - run:
          name: Copy SDK version
          command: cp -f ./app/VERSION ./sdk/python/VERSION

      - run:
          name: Deploy Pip release
          command: ./sdk/python/deploy.sh

  deploy-docs:
    docker:
      - image: python:3.12
    steps:
      - run:
          name: Install core dependencies
          command: |
            apt-get update
            apt-get install -y git g++ gcc make

      - checkout
      - run:
          name: Install documentation dependencies
          command: pip install --no-cache-dir -r ./docs/requirements.txt

      - run:
          name: Deploy documentation
          command: |
            git config --global user.name "CircleCI ( ${CIRCLE_USERNAME} )"
            git config --global user.email "${CIRCLE_USERNAME}@${CIRCLE_BRANCH}"
            ./docs/deploy.sh git@github.com:zimagi/zimagi.git "${CIRCLE_BRANCH}"

  update-helm-chart:
    docker:
      - image: python:3.12
    steps:
      - run:
          name: Install core dependencies
          command: |
            apt-get update
            apt-get install -y git

      - checkout
      - run:
          name: Update Zimagi helm chart version
          command: |
            git config --global user.name "CircleCI ( ${CIRCLE_USERNAME} )"
            git config --global user.email "${CIRCLE_USERNAME}@${CIRCLE_BRANCH}"
            ./app/deploy.sh git@github.com:zimagi/charts.git main

workflows:
  version: 2
  deploy:
    jobs:
      - test-api-commands:
          filters:
            tags:
              only: /.*/
      - test-api-encrypted-commands:
          filters:
            tags:
              only: /.*/
      - test-worker-commands:
          filters:
            tags:
              only: /.*/

      - test-javascript-sdk:
          filters:
            tags:
              only: /.*/
      - test-javascript-encrypted-sdk:
          filters:
            tags:
              only: /.*/

      - test-python-sdk:
          filters:
            tags:
              only: /.*/
      - test-python-encrypted-sdk:
          filters:
            tags:
              only: /.*/

      - test-api-schema:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

      - test-schedule:
          filters:
            tags:
              only: /.*/

      - deploy-cli-docker-amd64-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-schedule
      - deploy-cli-docker-arm64-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-schedule
      - deploy-cli-docker-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - deploy-cli-docker-amd64-latest
            - deploy-cli-docker-arm64-latest

      - deploy-cli-docker-amd64-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-api-schema
            - test-schedule
      - deploy-cli-docker-arm64-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-api-schema
            - test-schedule
      - deploy-cli-docker-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-cli-docker-amd64-version
            - deploy-cli-docker-arm64-version

      - deploy-server-docker-amd64-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-schedule
      - deploy-server-docker-arm64-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-schedule
      - deploy-server-docker-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - deploy-server-docker-amd64-latest
            - deploy-server-docker-arm64-latest

      - deploy-server-docker-nvidia-amd64-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-schedule
      - deploy-server-docker-nvidia-latest:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: main
          requires:
            - deploy-server-docker-nvidia-amd64-latest

      - deploy-server-docker-amd64-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-api-schema
            - test-schedule
      - deploy-server-docker-arm64-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-api-schema
            - test-schedule
      - deploy-server-docker-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-server-docker-amd64-version
            - deploy-server-docker-arm64-version

      - deploy-server-docker-nvidia-amd64-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-api-schema
            - test-schedule
      - deploy-server-docker-nvidia-version:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-server-docker-nvidia-amd64-version

      - deploy-npm:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-javascript-sdk
            - test-javascript-encrypted-sdk
            - test-api-schema
            - test-schedule

      - deploy-pip:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - test-api-commands
            - test-api-encrypted-commands
            - test-worker-commands
            - test-python-sdk
            - test-python-encrypted-sdk
            - test-api-schema
            - test-schedule

      - deploy-docs:
          filters:
            branches:
              only:
                - main
                - docs

      - update-helm-chart:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-cli-docker-version
            - deploy-server-docker-version
            - deploy-server-docker-nvidia-version
