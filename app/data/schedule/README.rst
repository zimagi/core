=====================================================
README for Directory: app/data/schedule
=====================================================

Directory Overview
------------------

**Purpose**
   This directory is responsible for defining and managing scheduled tasks within the application. It integrates with Django's ORM and Celery Beat to provide persistent storage and management of periodic tasks, intervals, crontabs, and clocked schedules.

**Key Functionality**
   *   Defines Django models for various scheduling types (Interval, Crontab, Clocked).
   *   Manages the creation, updating, and deletion of periodic tasks.
   *   Tracks changes to scheduled tasks to ensure Celery Beat's scheduler is updated.
   *   Provides a facade for interacting with scheduled task data.

Dependencies
-------------------------

*   **Django**: The primary web framework used for ORM and model definitions.
*   **django-celery-beat**: A Django application that provides a scheduler for Celery, allowing tasks to be defined and managed in the database.
*   **PyYAML**: Used for serializing and deserializing YAML data, specifically for task arguments and keyword arguments.
*   **timezone-field**: A Django field for handling timezones.

File Structure and Descriptions
-------------------------------

**app/data/schedule/migrations**
     **Role:** This directory contains Django migration files that define changes to the database schema related to scheduled tasks.
     **Detailed Description:** Each file within this directory represents a specific set of database schema modifications. These migrations are automatically generated by Django when changes are made to the models defined in `models.py`. They ensure that the database structure remains synchronized with the application's data models, allowing for version control and smooth updates of the database.

**app/data/schedule/models.py**
     **Role:** This file defines the Django models for managing different types of schedules and periodic tasks.
     **Detailed Description:** It contains `ScheduledTaskChanges` for tracking updates to tasks, `ScheduledTaskFacade` for abstracting database operations, and `ScheduleModelMixin` for common save behavior. It also defines `TaskInterval`, `TaskCrontab`, `TaskDatetime` as wrappers around `django-celery-beat`'s schedule types, and `ScheduledTask` which represents the core periodic task. This file is central to how scheduled tasks are structured, validated, and persisted in the database, including custom validation logic for ensuring only one schedule type is set per task.

Execution Flow and Interconnection
----------------------------------

**Control Flow Summary**
   1.  When a scheduled task or a schedule type (interval, crontab, clocked) is created, updated, or deleted, the `save()` or `delete()` methods in `app/data/schedule/models.py` are invoked.
   2.  These methods, particularly through `ScheduleModelMixin` and direct calls in `ScheduledTask`, trigger `ScheduledTaskChanges.update_changed()` or `ScheduledTaskChanges.changed()`.
   3.  The `ScheduledTaskChanges` model, which is part of `django-celery-beat`'s mechanism, signals to the Celery Beat scheduler that there are updates to the periodic tasks, prompting it to reload the schedule from the database.
   4.  The `ScheduledTaskFacade` in `models.py` provides an interface for higher-level application logic to interact with scheduled tasks, abstracting the underlying database operations and ensuring that schedule changes are properly propagated.

**External Interfaces**
   *   **PostgreSQL Database:** The models defined in `app/data/schedule/models.py` interact directly with the PostgreSQL database (or any configured Django database backend) for storing and retrieving all scheduled task configurations, intervals, crontabs, and clocked schedules.
   *   **Celery Beat Scheduler:** The `ScheduledTaskChanges` model acts as a critical interface to the Celery Beat scheduler. When changes are made to scheduled tasks in the database, `ScheduledTaskChanges` ensures that Celery Beat is notified to reload its schedule, thereby activating or deactivating tasks as configured.
   *   **Celery Workers:** While not directly interacting, the scheduled tasks defined here are ultimately executed by Celery workers, which pick up tasks from the message queue based on the schedule managed by Celery Beat.
