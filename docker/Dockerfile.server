#
#====================================================================
# Zimagi Docker image
#
#
# Base image
#
ARG ZIMAGI_PARENT_IMAGE="ubuntu:24.04"
FROM ${ZIMAGI_PARENT_IMAGE}
#
# Dockerfile arguments
#
ARG ZIMAGI_ENVIRONMENT="prod"
ARG ZIMAGI_USER_UID=1010
#
#====================================================================
# Core server configuration
#
#
# Core environment variables
#
ENV LANG=C.UTF-8
ENV PYTHONUNBUFFERED=1
ENV REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt

ENV LIBGIT_VERSION=1.9.0
ENV GECKO_VERSION=v0.36.0
#
# Shell environment
#
SHELL ["/bin/bash", "--login", "-c"]
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
#
# Package repository management
#
COPY ./docker/packages.core.txt /root/packages.core.txt
RUN apt-get update -y \
  && apt-get upgrade -y \
  && sed '/^\s*\#.*$/d' /root/packages.core.txt | xargs -r apt-get install -y --no-install-recommends \
  && rm -rf /var/lib/apt/lists/*

RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
  && echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
  https://download.docker.com/linux/ubuntu/ $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list

RUN curl -fsSL https://packages.mozilla.org/apt/repo-signing-key.gpg | gpg --dearmor -o /usr/share/keyrings/mozilla-archive-keyring.gpg \
  && echo "deb [signed-by=/usr/share/keyrings/mozilla-archive-keyring.gpg] \
  https://packages.mozilla.org/apt/ mozilla main" > /etc/apt/sources.list.d/mozilla.list
#
# System dependencies
#
COPY ./docker/packages.server.txt /root/packages.server.txt
RUN apt-get update -y \
  && sed '/^\s*\#.*$/d' /root/packages.server.txt | xargs -r apt-get install -y --no-install-recommends \
  && rm -rf /var/lib/apt/lists/*

RUN wget --quiet https://github.com/libgit2/libgit2/archive/v${LIBGIT_VERSION}.tar.gz \
  && tar xzf v${LIBGIT_VERSION}.tar.gz \
  && cd libgit2-${LIBGIT_VERSION}/ \
  && cmake . \
  && make \
  && make install \
  && cd .. \
  && rm -Rf libgit2-${LIBGIT_VERSION}/ \
  && rm -f v${LIBGIT_VERSION}.tar.gz \
  && ldconfig

RUN git clone --depth 1 --branch "${GECKO_VERSION}" https://github.com/mozilla/geckodriver.git /tmp/geckodriver-src \
  && cd /tmp/geckodriver-src \
  && cargo build --release \
  && cp target/release/geckodriver /usr/local/bin/ \
  && strip /usr/local/bin/geckodriver || true \
  && rm -rf /tmp/geckodriver-src
#
# User initialization
#
RUN groupadd -f --system --gid ${ZIMAGI_USER_UID} zimagi \
  && (! getent passwd ${ZIMAGI_USER_UID} || userdel -f $(id -nu ${ZIMAGI_USER_UID})) \
  && useradd --system --create-home \
  --home-dir /home/zimagi \
  --shell /bin/bash \
  --uid ${ZIMAGI_USER_UID} \
  --gid zimagi \
  zimagi \
  && echo 'zimagi ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
#
#====================================================================
# Application configuration
#
#
# Application environment variables
#
ENV VIRTUAL_ENV_DIR=/opt/venv
ENV DATA_DIR=/var/local/zimagi
ENV LIB_DIR=/usr/local/lib/zimagi
ENV MODULE_DIR=${LIB_DIR}/modules
ENV FILE_DIR=${LIB_DIR}/files
ENV APP_DIR=/usr/local/share/zimagi
ENV SDK_DIR=/usr/local/share/zimagi-client

ENV PATH="${VIRTUAL_ENV_DIR}/bin:${PATH}"
#
# Python environment and packages
#
RUN python3 -m venv ${VIRTUAL_ENV_DIR}

COPY ./app/requirements.server.txt /home/zimagi/requirements.server.txt
COPY ./app/requirements.local.txt /home/zimagi/requirements.local.txt
RUN pip3 install --no-cache-dir -r /home/zimagi/requirements.server.txt
RUN test ! -f /home/zimagi/requirements.${ZIMAGI_ENVIRONMENT}.txt \
  || pip3 install --no-cache-dir -r /home/zimagi/requirements.${ZIMAGI_ENVIRONMENT}.txt

COPY --chown=zimagi:zimagi ./sdk/python ${SDK_DIR}
COPY --chown=zimagi:zimagi ./app/VERSION ${SDK_DIR}/VERSION
VOLUME ${SDK_DIR}
RUN cd ${SDK_DIR} \
  && rm -Rf build dist \
  && pip3 install -U pip setuptools \
  && python3 setup.py sdist bdist_wheel --universal \
  && pip3 install "dist/zimagi-`cat VERSION`-py2.py3-none-any.whl" --no-cache-dir \
  && rm -f "${VIRTUAL_ENV_DIR}/bin/zimagi"
#
# Python virtual environment directory
#
RUN chown -R zimagi:zimagi ${VIRTUAL_ENV_DIR}
#
# Application directory
#
COPY --chown=zimagi:zimagi ./app ${APP_DIR}
VOLUME ${APP_DIR}
WORKDIR ${APP_DIR}
#
# Data directory
#
RUN mkdir ${DATA_DIR} && chown zimagi:zimagi ${DATA_DIR}
VOLUME ${DATA_DIR}
#
# Library directory
#
RUN mkdir ${LIB_DIR} && chown zimagi:zimagi ${LIB_DIR}
COPY --chown=zimagi:zimagi ./lib/modules ${MODULE_DIR}
VOLUME ${LIB_DIR}
#
# Application entrypoints and dependencies
#
RUN ln -s ${APP_DIR}/scripts/cli.sh /usr/local/bin/zimagi \
  && ln -s ${APP_DIR}/scripts/install.sh /usr/local/bin/zimagi-install \
  && ln -s ${APP_DIR}/scripts/gateway.sh /usr/local/bin/zimagi-gateway \
  && ln -s ${APP_DIR}/scripts/command.sh /usr/local/bin/zimagi-command \
  && ln -s ${APP_DIR}/scripts/mcp.sh /usr/local/bin/zimagi-mcp \
  && ln -s ${APP_DIR}/scripts/data.sh /usr/local/bin/zimagi-data \
  && ln -s ${APP_DIR}/scripts/scheduler.sh /usr/local/bin/zimagi-scheduler \
  && ln -s ${APP_DIR}/scripts/controller.sh /usr/local/bin/zimagi-controller \
  && ln -s ${APP_DIR}/scripts/worker.sh /usr/local/bin/zimagi-worker \
  && ln -s ${APP_DIR}/scripts/celery-flower.sh /usr/local/bin/celery-flower
#
# Execution gateway
#
EXPOSE 5000
USER zimagi
RUN zimagi-install
ENTRYPOINT ["zimagi"]
