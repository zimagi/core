Command API
===========

The Zimagi Command API allows external systems and client applications to programmatically execute Zimagi commands and receive streaming responses.

Overview
--------
The Command API exposes all CLI commands as RESTful API endpoints. It supports secure communication, authentication, and real-time streaming of command output.

API Endpoint
------------
The Command API typically runs on `localhost:5123` by default, but this can be configured via environment variables (`ZIMAGI_COMMAND_HOST`, `ZIMAGI_COMMAND_PORT`).

Authentication
--------------
Requests to the Command API require token-based authentication. You need to provide a valid `user` and `token` (or `api_key`) in the request headers or parameters.

*   **Python SDK**:
    .. code-block:: python

        from zimagi import CommandClient
        client = CommandClient(user="admin", token="your_admin_token")
        client.initialize()

*   **JavaScript SDK**:
    .. code-block:: javascript

        import { CommandClient } from 'zimagi';
        const client = new CommandClient({ user: 'admin', token: 'your_admin_token' });
        await client.initialize();

Executing Commands
------------------
Commands are executed via `POST` requests to the API endpoint, typically `/command/<command_path>`. The command parameters are sent in the request body.

Example: Executing `platform info`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*   **Python SDK**:
    .. code-block:: python

        response = client.execute("platform info")
        for message in response.messages:
            print(message.message)

*   **JavaScript SDK**:
    .. code-block:: javascript

        const response = await client.execute('platform info');
        response.messages.forEach(message => console.log(message.message));

Streaming Responses
-------------------
The Command API is designed for streaming responses, meaning messages are sent back to the client as they are generated by the command execution. This is particularly useful for long-running tasks.

*   **Python SDK**: The `execute` method handles streaming automatically, aggregating messages into a `CommandResponse` object.
*   **JavaScript SDK**: The `CommandClient` can accept a `messageCallback` function to process messages in real-time.

    .. code-block:: javascript

        const client = new CommandClient({
            user: 'admin',
            token: 'your_admin_token',
            messageCallback: (message) => console.log(`[${message.type}] ${message.message}`)
        });
        await client.initialize();
        await client.execute('long/running/command');

API Schema
----------
The Command API provides an OpenAPI-compatible schema that describes all available commands, their parameters, and expected responses. This schema can be accessed to dynamically understand the API structure.

*   **Python SDK**: `client.get_schema()`
*   **JavaScript SDK**: `client.getSchema()`

Core API Components (`app/systems/api/command`)
-----------------------------------------------
*   **`app/systems/api/command/schema.py`**: Defines API schema generation logic.
*   **`app/systems/api/command/codecs.py`**: Custom encoding/decoding for command data.
*   **`app/systems/api/command/response.py`**: Encrypted response class.
*   **`app/systems/api/command/auth.py`**: Authentication and permission checks.
*   **`app/systems/api/command/routers.py`**: Dynamically generates URL routes.
*   **`app/systems/api/command/views.py`**: Handles HTTP requests for command execution.
*   **`app/systems/api/command/renderers.py`**: Custom renderer for schema data.
